from typing import cast, TypedDict

from yt_dlp import YoutubeDL


class FormatExtsDict(TypedDict):
    video: set[str]
    audio: set[str]
    storyboards: set[str]


FORMAT_EXTS = cast(FormatExtsDict, YoutubeDL._format_selection_exts)
_THUMBNAIL_EXTS = (
    "mp3",
    "mkv",
    "mka",
    "ogg",
    "opus",
    "flac",
    "m4a",
    "mp4",
    "mov",
)

QUALITY: dict[int, str] = {
    0: "144",
    1: "240",
    2: "360",
    3: "480",
    4: "720",
    5: "1080",
    6: "1440",
    7: "2160",
    8: "4320",
    9: "5250",
}
"""Dict to select video quality. For audio quality, use `QUALIY.keys()`."""


def gen_format_opts(extension: str, quality: int) -> dict:
    """Generate custom YDLOpts by provided arguments.

    Args:
        extension: Wanted file extension. Custom options will be generated by the extension type.
        quality: Wanted file quality. Range between [0-9].

    Raises:
        ValueError: `extension` or `quality` is invalid.
    """

    if not quality in QUALITY.keys():
        raise ValueError(
            "Invalid quality range. Expected int range [0-9].",
        )

    ydl_opts = {"final_ext": extension, "postprocessors": []}
    ydl_opts["postprocessors"].append(
        {"key": "FFmpegMetadata", "add_metadata": True, "add_chapters": True}
    )

    if extension in _THUMBNAIL_EXTS:
        ydl_opts["postprocessors"].append(
            {"key": "EmbedThumbnail", "already_have_thumbnail": False}
        )

    # VIDEO
    if extension in FORMAT_EXTS["video"]:
        video_quality = QUALITY[quality]

        ydl_opts.update(
            {
                "format": f"bestvideo[height<={video_quality}]+bestaudio/bestvideo[height<={video_quality}]/best",
                "format_sort": [f"ext:{extension}:mp4:mkv:mov"],
                "writesubtitles": True,
                "subtitleslangs": "all",
            }
        )
        ydl_opts["postprocessors"].append(
            {"key": "FFmpegVideoConvertor", "preferedformat": extension}
        )
        ydl_opts["postprocessors"].append(
            {"key": "FFmpegEmbedSubtitle", "already_have_subtitle": False},
        )

    # AUDIO
    elif extension in FORMAT_EXTS["audio"]:
        ydl_opts.update(
            {
                "format": "bestaudio/best",
                "format_sort": [f"ext:{extension}:m4a:mp3:ogg"],
                "postprocessor_args": {
                    "thumbnailsconvertor+ffmpeg_o": [
                        "-c:v",
                        "png",
                        "-vf",
                        "crop=ih",
                    ]
                },
            }
        )
        ydl_opts["postprocessors"].append(
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": extension,
                "preferredquality": quality,
                "nopostoverwrites": False,
            }
        )

    # ERROR
    else:
        raise ValueError(
            "Invalid extension type. Expected:",
            "VIDEO:",
            *FORMAT_EXTS["video"],
            "AUDIO:",
            *FORMAT_EXTS["audio"],
        )

    return ydl_opts
